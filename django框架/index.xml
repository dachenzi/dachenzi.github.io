<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django框架s on dahl&#39;s blog</title>
    <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in Django框架s on dahl&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>dahlhin.li@gmail.com (daxin.li)</managingEditor>
    <webMaster>dahlhin.li@gmail.com (daxin.li)</webMaster>
    <copyright>(c) 2015 Lee xin.</copyright><atom:link href="https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1-django-介绍-MTV-命令-基础配置-admin</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/1-django-%E4%BB%8B%E7%BB%8D-mtv-%E5%91%BD%E4%BB%A4-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/1-django-%E4%BB%8B%E7%BB%8D-mtv-%E5%91%BD%E4%BB%A4-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-admin/</guid>
      <description>{% raw %}
文章目录 1 什么是web框架 2 WSGI 3 MVC与MTV模式  3.1 MVC框架 3.2 MTV框架 3.3 区别   4 django介绍  4.1 Django处理顺序 4.2 创建django站点  4.2.1 安装Django 4.2.2 创建一个project 4.2.3 创建一个app 4.2.3 启动Django项目   4.3 Django 版的 hello world  4.3.1 定义URL选择器 4.3.2 定义views函数 4.3.3 启动服务   4.4 基础配置  4.4.1 配置静态文件存放路径 4.4.2 配置模板路径 4.4.3 关闭csrftoken 4.4.4 连接数据库 4.4.5 加载静态文件   4.5 django admin配置  4.</description>
    </item>
    
    <item>
      <title>2-django-urls路由系统基本使用</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/2-django-urls%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/2-django-urls%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>{% raw %}
 1 路由系统(urls控制)  1.1 正则字符串参数 1.2 url的分组  1.2.1 无名分组 1.2.2 有名分组   1.3 URLconf 在什么上查找 1.4 include(路由分发) 1.5 别名(name参数) 1.6 反推URL 1.7 命名空间    1 路由系统(urls控制) url控制其实就是把不同的url对应到不同的views函数中去
格式：
# 项目目录下的urls.py文件中 urlpatterns = [ url(regex, view, kwargs=None, name=None) ... ... ] url可以有多个，每个url都是一个独立的规则。 参数如下：
 regex(url正则表达式):与之匹配的 URL 会执行对应的第二个参数 view。 view(views视图函数): 用于执行与正则表达式匹配的 URL 请求。 kwargs(参数列表): 视图使用的字典类型的参数。 &amp;ndash;&amp;gt; 很少使用 name(别名): 用来反向获取 URL。  1.1 正则字符串参数 url的第一个参数为正则表达式，所以常用的正则表达式符号都可以进行匹配</description>
    </item>
    
    <item>
      <title>3-django-template模板基本使用</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/3-django-template%E6%A8%A1%E6%9D%BF%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/3-django-template%E6%A8%A1%E6%9D%BF%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>{% raw %}
文章目录 1 Template  1.1 模板的基础使用  1.1.1 变量 1.1.2 注释标签 1.1.3 深度查询 1.1.4 内置变量过滤器filter 1.1.5 自定义过滤器之filter 1.1.6 自定义过滤器之simple_tag 1.1.7 inclusion_tag   1.2 逻辑控制语法  1.2.1 for标签 1.2.2 if标签 1.2.3 ifequal/ifnotequal 标签   1.3 特殊标签 1.4 extends模板继承 1.5 include引入    1 Template  使用 Django的 模板系统 (Template System)来实现将Python代码和HTML代码分开的目的。 python的模板包涵：HTML代码＋逻辑控制代码 , 将具体数据嵌入到前端模板的语法，在一个html文件中包含模板语法的文件，可以认为是模板文件
1.1 模板的基础使用 主要分为两部分：渲染变量使用双大括号{{ }}，渲染标签则使用双大括号双百分号{% %}
1.1.1 变量 在html页面中使用两个大括号包起来的字符串叫做变量：
{{ Var_name }} 这里通过python django的shell环境来举例（在这个环境中可以直接引用 所属django模块中的变量等信息）</description>
    </item>
    
    <item>
      <title>4-django-orm基本使用</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/4-django-orm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/4-django-orm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>{% raw %}
文章目录 1 数据库与ORM 2 orm的配置  2.1 引擎和配置 2.2 mysql驱动程序   3 orm 表模型  3.1 创建表对象 3.2 Django字段类型 3.3 常用字段参数说明 3.4 特殊类型字段参数说明 3.5 Meta信息 3.6 生成表  3.6.1 注册app 3.6.2 修改表结构遇到的问题     4 利用orm完成数据库的增删改查  4.1 orm之增加 4.2 orm之删除 4.3 orm之修改 4.4 orm之查询  4.4.1 查询过滤方法 4.4.2 限制查询集（切片） 4.4.2 字段查询（双下划线） 4.4.3 Q对象     5 表与表之间的关系  5.1 一对多  5.</description>
    </item>
    
    <item>
      <title>5-django-csrf-session&amp;cookie</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/5-django-csrf-sessioncookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/5-django-csrf-sessioncookie/</guid>
      <description>{% raw %}
文章目录 1 CSRF跨站请求伪造  1.1 CSRF攻击介绍及防御 1.2 防御CSRF攻击  1.2.1 验证 HTTP Referer 字段 1.2.2 在请求地址中添加 token 并验证 1.2.3 在 HTTP 头中自定义属性并验证 1.2.4 django csrf token   1.3 form表单提交 1.4 ajax提交 1.5 CSRF装饰器   2 Cookie&amp;amp;Session  2.1 cookie/cookies  2.1.1 django中cookies用法介绍 2.1.2 加密的cookies 2.1.3 基于自定义分页的实例 2.1.4 利用cookie进行用户登陆检测   2.2 Session  2.2.1 Django 中的 session 2.2.2 django 中session的操作  2.2.2.1 设置session 2.2.2.2 获取session 2.</description>
    </item>
    
    <item>
      <title>6-Form-ModelForm对象</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/6-form-modelform%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/6-form-modelform%E5%AF%B9%E8%B1%A1/</guid>
      <description>{% raw %}
文章目录 1 Form表单验证  1.1 创建一个Form表单对象 1.2 利用Form表单对象进行验证 1.3 利用Form对象手动生成前端标签 1.4 利用Form对象自动生成前端标签 1.5 Form字段的widget属性 1.6 Form字段其他的属性 1.7 特别补充-ChoiceField 1.8 自定义验证规则  1.8.1 通过对象来自定义验证规则 1.8.2 通过函数来自定义验证规则 1.8.3 通过在当前类的中定义 clean_字段名 的方法 来实现正则验证 例子：注册的时候，两次密码一致性的验证 1.8.4 强制触发异常     2 ModelForm表单验证  2.1 基本使用 2.2 自定制字段名 2.3 展示指定的列 2.4 初始化数据 2.5 更新数据 2.6 其他ModelForm配置项    1 Form表单验证  什么是form？django 中的 form 组件 专门用来做对用户通过form表单形式提交的数据的格式进行验证的,还可以提供诸如form表单生成等牛逼的功能。
 使用方式为：首先我们定义一个Form模版（可以理解为是匹配数据的模版），其中对字段进行了规范。接下来请求发过来后(request.POST)，我们把request.POST的数据交给form模版，进行验证，form模版验证完成后会产出三个信息。
 是否验证成功 所有的正确信息 所有的错误信息  1.</description>
    </item>
    
    <item>
      <title>6-自定义类admin管理增删改查</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/6-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BBadmin%E7%AE%A1%E7%90%86%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/6-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BBadmin%E7%AE%A1%E7%90%86%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>{% raw %}
文章目录 1 django admin分析 2 django admin源码分析  2.1 注册部分 2.2 路由分发部分 2.3 流程总结 2.4 定制admin   3 django admin的接口 4 自定义ayra进行CRUD  4.1 准备工作  4.1.1 文件加载顺序 4.1.2 让我们的程序被优先加载 4.1.3 编写调用文件 4.1.4 更换装载应用的方式 4.1.5 include本质   4.2 为每个model对象生成对应的url  4.2.1 注册model类 4.2.2 service/arya基本实现 4.2.3 添加urls及views函数      1 django admin分析 在每个app下都会存在一个admin.py文件用于注册当前app下的models文件，给django admin来管理，仔细观察Django admin针对不同models的管理页面、URL等信息，我们发现
 不同的类对象生成的url是类似的。  # UserInfo /admin/app01/userindo/ /admin/app01/userinfo/add /admin/app01/userinfo/1/change /admin/app01/userinfo/2/delete # Role /admin/role/ /admin/role/add /admin/role/1/change /admin/role/2/delete 不同的类，页面的布局模版也是类似的。 所以，我们分析，admin内部应该是为我们的注册的类，生成了对应的url，以及视图函数，并且通过相同的模版渲染来返回页面的。下面来跟一下源码文件  2 django admin源码分析 2.</description>
    </item>
    
    <item>
      <title>7-自定义类admin管理增删改查</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/7-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BBadmin%E7%AE%A1%E7%90%86%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/7-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BBadmin%E7%AE%A1%E7%90%86%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>{% raw %}
文章目录 1 django admin分析 2 django admin源码分析  2.1 注册部分 2.2 路由分发部分 2.3 流程总结 2.4 定制admin   3 django admin的接口 4 自定义ayra进行CRUD  4.1 准备工作  4.1.1 文件加载顺序 4.1.2 让我们的程序被优先加载 4.1.3 编写调用文件 4.1.4 更换装载应用的方式 4.1.5 include本质   4.2 为每个model对象生成对应的url  4.2.1 注册model类 4.2.2 service/arya基本实现 4.2.3 添加urls及views函数   4.3 定制显示字段 4.4 删除编辑按钮  4.4.1 反向生成url 4.4.2 抽离公共方法 4.4.3 权限接口   4.5 抽离页面显示配置 4.6 添加页面实现  4.</description>
    </item>
    
    <item>
      <title>8-rbac权限系统</title>
      <link>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/8-rbac%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/django%E6%A1%86%E6%9E%B6/8-rbac%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>{% raw %}
文章目录 1 rbac 2 表结构设计 3 初始化权限结构 4 中间件验证 5 生成菜单显示  1 rbac 基于角色的权限管理系统，可以独立成为一个组建，来引入各个项目。主要具有两个功能：
 权限验证 菜单生成  通过将权限信息写入到session中，每次访问时，使用中间件来匹配访问的URL与session中权限列表中的url是否匹配，如果匹配准入，否则提示无权访问，针对菜单的显示功能，通过inclusion_tag渲染的方式，构造一个菜单列表，进行渲染，可以在任何使用的地方，使用templatetags的方式进入，并渲染（样式需要自行调整）。
2 表结构设计 分析业务逻辑，创建五张表:
 用户表：存放用户相关信息，并关联角色表（一个人有多个角色，一个角色可以包含多个人） 角色表：角色信息，关联权限组（一个角色可以关联多个角色组，一个角色组可以关联多个角色） 权限表：存放权限信息，存储带正则表达式的url（一个权限只能关联一个权限组） 权限组表：将权限进行分类，并关联到所属的菜单中（一个组只能关联一个菜单） 菜单表：菜单信息  表关系如下： 下面是字段代码设计：字段可以自行增减。
from django.db import models class UserInfo(models.Model): name = models.CharField(verbose_name=&amp;#39;用户名&amp;#39;, max_length=8) passwd = models.CharField(verbose_name=&amp;#39;密码&amp;#39;, max_length=32) email = models.CharField(verbose_name=&amp;#39;邮箱&amp;#39;, max_length=32, null=True, blank=True) roles = models.ManyToManyField(verbose_name=&amp;#39;角色&amp;#39;, to=&amp;#39;Role&amp;#39;, related_name=&amp;#39;users&amp;#39;, blank=True, null=True) class Meta: db_table = &amp;#39;rbac_userinfo&amp;#39; verbose_name_plural = &amp;#39;用户表&amp;#39; def __str__(self): return self.</description>
    </item>
    
  </channel>
</rss>
