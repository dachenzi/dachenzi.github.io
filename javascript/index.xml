<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScripts on dahl&#39;s blog</title>
    <link>https://dachenzi.github.io/javascript/</link>
    <description>Recent content in JavaScripts on dahl&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>dahlhin.li@gmail.com (daxin.li)</managingEditor>
    <webMaster>dahlhin.li@gmail.com (daxin.li)</webMaster>
    <copyright>(c) 2015 Lee xin.</copyright><atom:link href="https://dachenzi.github.io/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1-JavaScript介绍及使用</title>
      <link>https://dachenzi.github.io/javascript/1-javascript%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/javascript/1-javascript%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>{% raw %}
文章目录 1 JavaScript概述  1.1 Java和JavaScript的区别 1.2 什么是JavaScript 1.3 JavaScript的组成   2 JavaScript基础  2.1 JavaScript调用方式 2.2 JavaScript的变量标识符  2.2.1 变量的命名 2.2.2 标识符   2.3 JS的数据类型  2.3.1 数字(Number)类型 2.3.2 字符串(String)类型 2.3.3 布尔(Boolean)类型 2.3.4 数组(Array)类型 2.3.5 对象(Object) 2.3.6 空(Null)类型和未定义(Undefined)类型 2.3.7 声明变量类型   2.4 运算符  2.4.1 == 和 === 的区别 2.4.2 variable++和++variable的区别 2.4.3 三元运算符 2.4.4 逗号操作符 2.4.5 其他   2.5 流程控制  2.5.1 顺序结构 2.</description>
    </item>
    
    <item>
      <title>2-JavaScript函数-作用域-异常</title>
      <link>https://dachenzi.github.io/javascript/2-javascript%E5%87%BD%E6%95%B0-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/javascript/2-javascript%E5%87%BD%E6%95%B0-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E5%BC%82%E5%B8%B8/</guid>
      <description>{% raw %}
文章目录 1 Javascript函数  1.1 基本语法 1.2 函数表达式 1.3 函数的调用 1.4 高阶函数    1 Javascript函数  javascript的函数和其他任何一门语言的函数是相同的，都是用来组合代码块完成某个功能和任务的。不同的是：执行函数的代码可以放在函数之前，也可以放在函数之后，因为js是先编译完毕后再执行代码中的语句。(不建议这么做)
1.1 基本语法 函数分为带参数的和不带参数的。
&amp;lt;script&amp;gt; // 不带参数的函数 function functionname() { 执行代码 } // 带参数的函数 function myFunction(var1,var2) { // 同样是形参  执行代码 } &amp;lt;/script&amp;gt; 1.2 函数表达式  使用表达式来定义函数，表达式中的函数名可以省略，如果这个函数名不省略，也只能用在此函数内部。
// 匿名函数 const add = function(x, y){ return x + y; }; console.log(add(4, 6)); // 有名字的函数表达式 const sub = function fn(x, y){ return x - y; }; console.</description>
    </item>
    
    <item>
      <title>3-React基本使用</title>
      <link>https://dachenzi.github.io/javascript/3-react%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dahlhin.li@gmail.com (daxin.li)</author>
      <guid>https://dachenzi.github.io/javascript/3-react%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>{% raw %}
1 React  React是Facebook开发并开源的前端框架。当时他们的团队在市面上没有找到合适的MVC框架，就自己写了一个Js框架，用来架设Instagram（图片分享社交网络）。2013年React开源。
 React解决的是前端MVC框架中的View视图层的问题。
 1.1 Virtual DOM  DOM（文档对象模型Document Object Model）将网页内所有内容映射到一棵树型结构的层级对象模型上，浏览器提供对DOM的支持，用户可以是用脚本调用DOM API来动态的修改DOM结点，从而达到修改网页的目的，这种修改是浏览器中完成，浏览器会根据DOM的改变重绘改变的DOM结点部分。
修改DOM重新渲染代价太高，前端框架为了提高效率，尽量减少DOM的重绘，提出了Virtual DOM，所有的修改都是先在Virtual DOM上完成的，通过比较算法，找出浏览器DOM之间的差异，使用这个差异操作DOM，浏览器只需要渲染这部分变化就行了。
 React实现了DOM Diff算法可以高效比对Virtual DOM和DOM间的差异。
 1.2 支持JSX语法 JSX是一种JavaScript和XML混写的语法，是JavaScript的扩展。
React.render( /* React提供的渲染函数 */ &amp;lt;div&amp;gt; /* XML格式标签 */ &amp;lt;div&amp;gt; &amp;lt;div&amp;gt;content&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;, document.getElementById(&amp;#39;example&amp;#39;) /* javascript语法操作DOM */ ); JSX规范：
 约定标签中首字母小写就是html标记，首字母大写就是React组件 要求严格的HTML标记，要求所有标签都必须闭合。br也应该写成 ，/前留一个空格。 单行省略小括号，多行请使用小括号 元素有嵌套，建议多行，注意缩进 JSX表达式：表达式使用{}括起来，如果大括号内使用了引号，会当做字符串处理，例如 {&amp;lsquo;2&amp;gt;1?true:false&amp;rsquo;}里面的表达式成了字符串了  2 基本使用 2.1 导入React 使用前需要进行导入操作：（下面的导入操作是基于ES6语法的)
import React from &amp;#39;react&amp;#39;; 导入react模块 import ReactDOM from &amp;#39;react-dom&amp;#39;; 导入react的DOM模块，用于操作Virtual DOM 2.</description>
    </item>
    
  </channel>
</rss>
